import java.util.Arrays;

public class PlayList
{
	/** Song[] array list instance variable*/
	private Song[] list;
	
	/** default constructor used to set the instance variables to default values*/
	public PlayList()
	{
		// I would recommend setting the length to 1
		list = new Song[1];
		// Then make sure you add 1 song to the list in index 0
		list[0] = new Song("Song Title", "Song Album", "Artist", 0);
	}

	/** initialization constructor used to set the instance variables
		* @param x the length of the playlist */
	
	public PlayList(int x)
	{
		// this should set the length of the playlist
		list = new Song[x];
	}
	
	/** modifier method to set the instance variable list
		* @param x the length of the playlist*/
	public void setList(int x)
	{
		// this should set the length of the playlist
		list = new Song[x];
	}
	
	/** accessor method to get the entire playlist in a String
		* @return return the entire playslist as a Song[] array*/
	public Song[] getList()
	{
		return list;
		
	}
	
	/** method to add a song to the playlist
		* @param x the position in the playlist to add the song
		* @param s the song to add to the playlist*/
	public void addSong(int x, Song s)
	{
		/* you need to check to make sure the array is big enough to add the song
		   if it is not big enough you will need to create a large enough array
			   and then transfer the songs to the new array before assigning the new
			   array back to the list array*/
		int count = 0;
		
		if (list.length > x)
			list[x] = s;
		else {
			Song temp[] = new Song[x + 1];
			System.out.println(temp.length);
			
			for (Song s1 : list){
				temp[count] = s1;
				count++;
			}
			list = temp;
		}
	}
	
	/** method to get a song from the playlist
		* @param x the position in the playlist to get the song from
		* @return return the song in the position specified*/
	public Song getSong(int x)
	{
		return list[x];
		
	}
	
	/** method to get the number of songs in the playlist
		* @return return the number of songs in the playlist*/
	public int numSongs()
	{
		return list.length;
		
	}
	
	/** method to get the total length of the playlist specified in seconds
		* @return return the length of the playlist in seconds*/
	public int totalLength()
	{
		/* before accessing the length of an individual song you should ensure that the 
				song reference is not null*/
		int totalLength = 0;	
		for (Song x : list)
			if (x != null)
				totalLength += x.getLength();
		
		return totalLength;
	}
	
	/** method to remove any songs from the specified artist
		* @param ar the artist of the songs to remove from the playlist*/
	public void removeArtist(String ar)
	{
		/* to remove the songs with the specified artist you will first need to count the
				occurances of that artist. 
				Then you will need to create a new smaller array
				Then you can copy the songs to the new array excluding the ones from the artist*/
		int count = 0;
		for (Song x : list)
			if (x != null && x.getArtist() == ar)
				count += 1;
		Song[] updateList = new Song[list.length - count];
		int occurRemIndex = 0;
		for (Song x: list){
			if (x != null && x.getArtist() != ar){
				updateList[occurRemIndex] = x;
				occurRemIndex++;
			}
		}
		list = updateList;
		//System.out.println(Arrays.toString(list) + " : updated list after remArtist");
	}
	
	/** method to remove any songs longer than the length specified
		* @param length length of songs to removed given in seconds*/
	public void removeLength(int length)
	{
		// same as method above with creating a smaller array
		int count = 0;
		for (Song x : list)
			if (x != null && x.getLength() == length)
				count += 1;
		Song[] updateList = new Song[list.length - count];
		int occurRemIndex = 0;
		for (Song x: list){
			if (x != null && x.getLength() < length)
				updateList[occurRemIndex] = x;
			occurRemIndex++;	
		}
		System.out.println(updateList + " update list");
		//list = updateList;
	}
	
	/** method to shuffle the order of the playlist - use the card shuffling example from the arrays presentation to help*/
	public void shuffle()
	{
		// use the card shuffling example from the arrays presentation to help you with this
		int exchange;
		Song temp;
		for(int i = 0; i < list.length; i++)
		{
		   exchange = i+(int)(Math.random()*(list.length-i));
		   temp = list[i];
		   list[i] = list[exchange];
		   list[exchange] = temp;
		}
	}
	
	/** equals method to determine if two playlists are equal
		* @param obj the object to be compared
		* @return return true or false if the playlists are equal*/
	public boolean equals(Object obj)
	{
		PlayList pl = (PlayList)obj;
		if(!Arrays.equals(list, pl.getList()))
			return false;
		return true;
	}
	
	/** toString() method to get the instance variables
		* @return return a String containing the instance variablees*/
	public String toString()
	{
		return Arrays.toString(list);
	}
}